{
  "typescript import": {
    "prefix": [
      "imp",
      "import"
    ],
    "body": [
      "import { $2 } from \"$1\";"
    ],
    "description": "typescript import"
  },
  "console.log": {
    "prefix": [
      "log",
      "console"
    ],
    "body": [
      "console.log($1)"
    ],
    "description": "console.table"
  },
  "console.table": {
    "prefix": [
      "table",
      "console"
    ],
    "body": [
      "console.table($1)"
    ],
    "description": "console.table"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (let i = 0; i < $1; i++) {",
      "  $2",
      "}"
    ],
    "description": "for"
  },
  "define module": {
    "prefix": "define",
    "body": [
      "define([",
      "\t'require',",
      "\t'${1:dependency}'",
      "], function(require, ${2:factory}) {",
      "\t'use strict';",
      "\t$0",
      "});"
    ],
    "description": "define module"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "\tconst ${3:element} = ${2:array}[${1:index}];",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop": {
    "prefix": "foreach",
    "body": [
      "${1:array}.forEach(${2:element} => {",
      "\t$TM_SELECTED_TEXT$0",
      "});"
    ],
    "description": "For-Each Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (Object.hasOwnProperty.call(${2:object}, ${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$TM_SELECTED_TEXT$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": [
      "function ${1:name}(${2:params}) {",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t$TM_SELECTED_TEXT$0",
      "} else {",
      "\t",
      "}"
    ],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": [
      "const ${1:name} = new ${2:type}(${3:arguments});$0"
    ],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": [
      "do {",
      "\t$TM_SELECTED_TEXT$0",
      "} while (${1:condition});"
    ],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "\t$TM_SELECTED_TEXT$0",
      "} catch (${1:error}) {",
      "\t",
      "}"
    ],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": [
      "setTimeout(() => {",
      "\t$TM_SELECTED_TEXT$0",
      "}, ${1:timeout});"
    ],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": [
      "setInterval(() => {",
      "\t$TM_SELECTED_TEXT$0",
      "}, ${1:interval});"
    ],
    "description": "Set Interval Function"
  },
  "Import Statement": {
    "prefix": "import",
    "body": [
      "import { $0 } from \"${1:module}\";"
    ],
    "description": "Import external module"
  },
  "Region Start": {
    "prefix": "#region",
    "body": [
      "//#region $0"
    ],
    "description": "Folding Region Start"
  },
  "Region End": {
    "prefix": "#endregion",
    "body": [
      "//#endregion"
    ],
    "description": "Folding Region End"
  },
  "Log to the console": {
    "prefix": "log",
    "body": [
      "console.log($1);"
    ],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": [
      "console.warn($1);"
    ],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": [
      "console.error($1);"
    ],
    "description": "Log error to the console"
  },
  "new Promise": {
    "prefix": "newpromise",
    "body": [
      "new Promise((resolve, reject) => {",
      "\t$TM_SELECTED_TEXT$0",
      "})"
    ],
    "description": "Create a new Promise"
  },
  "Print to console variable": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "clop",
      "clo"
    ],
    "body": [
      "console.log(...[${1:variable}, 'ðŸ‘€ [$TM_FILENAME:$TM_LINE_NUMBER]: ${1:variable}'].reverse());"
    ],
    "description": "Log output to console with filename as prefix"
  },
  "Print to console an object recursively as an object": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "clopdir",
      "clodir"
    ],
    "body": [
      "console.dir(${1:variable}, {showHidden: false, depth: null, colors: true});"
    ],
    "description": "Log the object as intended. No more {a: [Object]}. On a browser console, user can expand the object to access nested object."
  },
  "Print to console an object recursively as a text": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "clopobj",
      "cloobj"
    ],
    "body": [
      "console.log(...[JSON.stringify(${1:variable}, null, 2), 'ðŸ‘€ [$TM_FILENAME:$TM_LINE_NUMBER] ${1:variable}:\\n',].reverse());"
    ],
    "description": "Log a string representation of the object as intended. No more {a: [Object]}. Be careful as big object can be hard to read on console."
  },
  "object to privet classs constractor": {
    "prefix": "thisp",
    "body": [
      "this._$1 = props.$1;"
    ],
    "description": "object to privet classs constractor"
  },
  "object to privet classs getter": {
    "prefix": "getp",
    "body": [
      "get $1(): $2 {",
      "  return this._$1;",
      "}",
      ""
    ],
    "description": "object to privet classs getter"
  }
}
